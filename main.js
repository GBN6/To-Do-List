/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n\n//     DOM\n\nconst UI = (() => {\n    setActiveProject();\n    const createNewProjectButton = document.querySelector('.btn-project-user');\n    const addNewTask = document.querySelector('.add-task');\n    createNewProjectButton.addEventListener('click', displayProjectInput);\n    addNewTask.addEventListener('submit', addNewTaskToList);\n    \n\n    function displayProjectInput() {\n        const newProjectPopup = document.querySelector('.add-project-popup');\n        const addNewProject = document.querySelector('.btn-add-project-popup');\n        const closeProject = document.querySelector('.btn-close-poject-popup');\n\n        addNewProject.addEventListener('click', addProject)\n        newProjectPopup.classList.add('active');\n        createNewProjectButton.classList.add('active');\n\n        closeProject.addEventListener('click', () => {\n            createNewProjectButton.classList.remove('active');\n            newProjectPopup.classList.remove('active')\n        })\n    }\n\n    function closeProjectInput() {\n        const newProjectPopup = document.querySelector('.add-project-popup');\n\n        createNewProjectButton.classList.remove('active');\n        newProjectPopup.classList.remove('active');\n    }\n\n    function addProject() {\n        const newProjectInput = document.querySelector('.input-add-project-popup');\n        const inputError = document.querySelector('.title-error')\n        let projectName = newProjectInput.value.trim();\n        if (projectName === '') {\n            inputError.textContent = 'Project must have name'\n            return;\n        }\n        if (projectList.contains(projectName)) {\n            inputError.textContent = 'Project must have different names'\n            return;\n        }\n        projectList.addProject(projectName);\n        inputError.textContent = '';\n        clearUserProjects()\n        renderProjectList();\n        newProjectInput.value = '';\n        closeProjectInput();\n    }\n\n    function renderProjectList() {\n        projectList.forEach(project => {\n                if (\n                    project.title !== 'Your Tasks' &&\n                    project.title !== 'Today' && \n                    project.title !== 'This week' \n                ) {\n                    renderProjectsNav(project.title);\n                }\n            })\n    }\n\n    function deleteProject() {\n        const deleteProjectButton = document.querySelectorAll('.btn-project-delete');\n        deleteProjectButton.forEach((element) => element.addEventListener('click', (e) => {\n            let projectName = e.target.parentNode.parentNode.textContent;\n            for (let i = 0; i < projectList.length; i++)\n            {\n                if (projectName === projectList[i].title)\n                {\n                    projectList.deleteProject(i);\n                    console.log(projectList);\n                    clearUserProjects();\n                    renderProjectList();\n                    clearTaskContainer()      \n                }         \n            }\n        }))\n    }\n\n    function setActiveProject() {\n        const activeProject = document.querySelectorAll('.btn-choose-project')\n        activeProject.forEach((element) => element.addEventListener('click', handleProjects)\n    )}\n\n    function handleProjects(e) {\n        hideAddTaskForm();\n        const projectTitle = this.textContent.trim();\n        if (e.target.classList.contains('fa-times'))\n        {\n            deleteProject();\n            return; \n        }\n        openProject(projectTitle, this);\n        renderTasksList(projectTitle);\n    }\n\n    function openProject(projectTitle, projectButton) {\n        const projectButtons = document.querySelectorAll('.btn-choose-project');\n        projectButtons.forEach((button) => button.classList.remove('active'));\n        projectButton.classList.add('active');\n        renderActiveProject(projectTitle);\n    }\n\n    function renderActiveProject(projectTitle) {\n        const tasksContainer = document.querySelector('.task-projects-preview');\n        const projectName = document.createElement('h1');\n        const tasksList = document.createElement('div');\n        const addTaskButton = document.createElement('button')\n        const addTaskButtonIcon = document.createElement('i');\n        const addTaskText = document.createElement('span');\n\n        clearTaskContainer()\n\n        tasksList.classList.add('task-list');\n        projectName.classList.add('current-project');\n        addTaskButton.classList.add('btn-add-task');\n        addTaskButtonIcon.classList.add('fas', 'fa-plus');\n        addTaskText.textContent = 'Add Task';\n\n        addTaskButton.appendChild(addTaskButtonIcon);\n        addTaskButton.appendChild(addTaskText);\n\n        projectName.textContent = `${projectTitle}`;\n\n        if (projectTitle === 'Today' || projectTitle === 'This week')\n        {\n            tasksContainer.appendChild(projectName);\n            tasksContainer.appendChild(tasksList);\n        }\n        else \n        {\n            tasksContainer.appendChild(projectName);\n            tasksContainer.appendChild(tasksList);\n            tasksContainer.appendChild(addTaskButton);\n            openAddTaskForm();\n        }\n        return tasksContainer;\n    }\n\n    function clearUserProjects() {\n        const userProjectList = document.querySelector('.projects-user');\n        userProjectList.innerHTML = '';\n    }\n\n    function clearTaskContainer() {\n        const tasksContainer = document.querySelector('.task-projects-preview');\n        tasksContainer.innerHTML = '';\n    }\n\n    function renderProjectsNav(title) {\n        const userProjectList = document.querySelector('.projects-user');\n        const userProjectButton = document.createElement('button');\n        const userProjectIcon = document.createElement('i');\n        const userProjectDeleteButton = document.createElement('button');\n        const userProjectDeleteIcon = document.createElement('i');\n        const projectTitleSpan = document.createElement('span');\n\n        userProjectIcon.classList.add('fas', 'fa-list-check');\n        userProjectDeleteIcon.classList.add('fas', 'fa-times');\n        userProjectButton.classList.add('btn-project', 'btn-choose-project');\n        userProjectDeleteButton.classList.add('btn-project-delete');\n        projectTitleSpan.textContent = title;\n\n        userProjectDeleteButton.appendChild(userProjectDeleteIcon);\n        userProjectButton.appendChild(userProjectIcon);\n        userProjectButton.appendChild(projectTitleSpan);\n        userProjectButton.appendChild(userProjectDeleteButton);\n\n        userProjectList.appendChild(userProjectButton);\n\n        deleteProject();\n        setActiveProject();\n        return userProjectList;\n    }\n\n\n    function openAddTaskForm() {\n        const openForm = document.querySelector('.btn-add-task');\n        const formContainer = document.querySelector('.add-task-form');\n        openForm.addEventListener('click', () => {\n            openForm.classList.add('active');\n            formContainer.classList.add('active');\n        })\n\n    }\n\n    function closeAddTaskForm() {\n        const openForm = document.querySelector('.btn-add-task');\n        const formContainer = document.querySelector('.add-task-form');\n        openForm.classList.remove('active');\n        formContainer.classList.remove('active');\n    }\n\n    function addNewTaskToList(e) {\n        e.preventDefault();\n        const projectName = document.querySelector('.current-project').textContent;\n        const taskTitle = document.querySelector('#input-task-title').value;\n        const taskInfo = document.querySelector('#input-task-info').value;\n        const taskDate = document.querySelector('#input-task-date').value;\n        const taskPriority = document.querySelector('.input-task-priority').value;\n        const taskTitleErorr = document.querySelector('.task-name-error')\n        let i = projectList.index(projectName);\n        if(projectList[i].contains(taskTitle))\n        {\n            taskTitleErorr.textContent = 'Tasks must have different names';\n            return;\n        }\n\n        taskTitleErorr.textContent = '';\n        projectList[i].addTask(taskTitle, taskInfo, taskDate, taskPriority);\n        e.target.reset();\n        hideAddTaskForm();\n        renderTasksList(projectName);\n        closeAddTaskForm()\n        console.log(projectList);\n        }        \n\n    function hideAddTaskForm() {\n        const formContainer = document.querySelector('.add-task-form');\n        formContainer.classList.remove('active');\n    }\n\n    function renderTasksList(projectName) {\n        let ind = projectList.index(projectName);\n        const tasksContainer = document.querySelector('.task-list');\n        tasksContainer.innerHTML = '';\n        projectList[ind].tasksList.forEach((task, i) => {\n            const taskDiv = document.createElement('div');\n            const checkedButton = document.createElement('button');\n            const taskName = document.createElement('div');\n            const taskInfoButton = document.createElement('button');\n            const taskDate = document.createElement('div')\n            const editTask = document.createElement('button');\n            const editTaskIcon = document.createElement('i');\n            const deleteTask = document.createElement('button');\n            const deleteTaskIcon = document.createElement('i');\n\n            taskDiv.classList.add('task');\n            taskDiv.setAttribute('data-project', `${projectName}`)\n            taskDiv.setAttribute('data-index', `${i}`)\n            checkedButton.classList.add('btn-task-checked');\n            taskName.classList.add('task-name');\n            taskInfoButton.classList.add('btn-task-info');\n            taskDate.classList.add('task-date');\n            editTask.classList.add('btn-task-edit');\n            editTaskIcon.classList.add('fas', 'fa-pen-to-square')\n            deleteTask.classList.add('btn-task-delete');\n            deleteTaskIcon.classList.add('fas', 'fa-trash-can');\n\n            taskName.textContent = `${task.title}`\n            taskInfoButton.textContent = 'Details'\n            taskDate.textContent = `${task.dueDate}`;\n            priorityCheck(taskDiv, task.priority);\n            toggleDoneTask(checkedButton, task, task.completed, taskDiv);\n\n\n            deleteTask.appendChild(deleteTaskIcon);\n            editTask.appendChild(editTaskIcon);\n            taskDiv.appendChild(checkedButton);\n            taskDiv.appendChild(taskName);\n            taskDiv.appendChild(taskInfoButton);\n            taskDiv.appendChild(taskDate);\n            taskDiv.appendChild(editTask);\n            taskDiv.appendChild(deleteTask);\n            tasksContainer.appendChild(taskDiv);\n\n            checkedButton.addEventListener('click', () => {\n                task.toggleCompleted();\n                console.log(projectList);\n                renderTasksList(projectName);\n            });\n            deleteTask.addEventListener('click', (e) => {\n                let taskDlt = document.querySelector(`div[data-index=\"${i}\"]`)\n                tasksContainer.removeChild(taskDlt);\n                projectList[ind].deleteTask(i);\n                console.log(projectList);\n            })\n\n            return tasksContainer;\n\n        });\n\n        function priorityCheck(container, value) {\n            if (value === 'low')\n            {\n                container.classList.add('task-low');\n            }\n            else if (value === 'medium')\n            {\n                container.classList.add('task-medium');\n            }\n            else if (value === 'high')\n            {\n                container.classList.add('task-high');\n            }\n            return container;\n        }\n        \n        function toggleDoneTask(button, task, value, container) {\n            const completedIcon = document.createElement('i');\n            completedIcon.classList.add('fas', 'fa-check')\n            if (value === true)\n            {\n                container.classList.add('completed');\n                button.appendChild(completedIcon);\n                console.log(button);\n            }\n            else \n            {\n                container.classList.remove('completed');\n                button.innerHTML = '';\n            }\n            return container;\n        }\n    }\n\n    // function submitTaskForm(e) {\n    //     e.preventdefault();\n    //     const projectName = document.querySelector('.current-project').textContent;\n    //     const taskTitle = document.querySelector('.input-task-title').value;\n    //     const taskInfo = document.querySelector('.input-task-info').value;\n    //     const taskDate = document.querySelector('.input-task-date').value;\n    //     const taskPriority = document.querySelector('.input-task-priority').value;\n    //     let getCurrentProject = projectList.filter((project) => project.getTitle() === projectName);\n    //     e.reset();\n    //     getCurrentProject.addTask(taskTitle, taskInfo, taskDate, taskPriority);\n    //     hideAddTaskForm();\n    //     console.log(getCurrentProject);\n    // }\n\n})();\n\n\n\n\nclass Project {\n    constructor(title){\n        this.title = title;\n        this.tasksList = [];\n    }\n\n    addTask(title, description, dueDate, priority) {\n        this.tasksList.push(new Tasks(title, description, dueDate, priority));\n    }\n\n    getTitle() {\n        return this.title;\n    }\n    contains(taskName) {\n        return this.tasksList.some((task) => task.title === taskName)\n    }\n    deleteTask(index) {\n        this.tasksList.splice(index, 1);\n    };\n\n}\n\nclass Tasks {\n    constructor(title, info, dueDate, priority) {\n        this.title = title;\n        this.info = info;\n        this.dueDate = dueDate;\n        this.priority = priority;\n        this.completed = false;\n    }\n    \n    toggleCompleted() {\n        this.completed === false ? this.completed = true : this.completed = false;\n    }\n    \n    editTask(key, value) {\n        this[key] = value;\n    }\n}\n\n\n\nlet projectList = [];\nprojectList.addProject = (title) => {\n    projectList.push(new Project(title));\n};\n\nprojectList.deleteProject = (position) => {\n    projectList.splice(position, 1);\n};\n\nprojectList.contains = (projectName) => {\n    return projectList.some((project) => project.title === projectName)\n}\n\nprojectList.index = (projectName) => {\n    for (let i = 0; i < projectList.length; i++)\n    {\n        if (projectName === projectList[i].getTitle())\n        {\n            return i;\n        }\n    }\n}\nprojectList.addProject('Your Tasks');\nprojectList.addProject('Today');\nprojectList.addProject('This week');\nprojectList[0].addTask('Task', 'DETAILS', '15.07.2022', 'low');\nprojectList[0].addTask('Task2', 'DETAILS', '15.07.2022', 'high');\nprojectList[0].addTask('Task3', 'DETAILS', '15.07.2022', 'medium');\nconsole.log(projectList);\n\nconst test = new Project('New Project');\n\nconsole.log(test.getTitle());\n\n\n\n//     addTask(title, info, dueDate, priority) { \n//         this.tasksList.push(new Tasks(title, info, dueDate, priority));\n//     }\n// }\n\n// class Tasks {\n//     constructor(title, info, dueDate, priority) {\n//         this.title = title;\n//         this.info = info;\n//         this.dueDate = dueDate;\n//         this.priority = priority;\n//         this.completed = false;\n//     }\n\n//     toggleCompleted() {\n//         this.completed === false ? this.completed = true : this.completed = false;\n//     }\n\n//     editTask(key, value) {\n//         this[key] = value;\n//     }\n// }\n\n\n// export default Tasks;\n\n//# sourceURL=webpack://to-do-list/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;