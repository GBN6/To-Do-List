/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (() => {

eval("//     DOM\nconst UI = (() => {\n    setActiveProject();\n    const createNewProjectButton = document.querySelector('.btn-project-user');\n\n    createNewProjectButton.addEventListener('click', displayProjectInput);\n\n    function displayProjectInput() {\n        const newProjectPopup = document.querySelector('.add-project-popup');\n        const addNewProject = document.querySelector('.btn-add-project-popup');\n\n        addNewProject.addEventListener('click', addProject)\n        newProjectPopup.classList.add('active');\n        createNewProjectButton.classList.add('active');\n    }\n\n    function closeProjectInput() {\n        const newProjectPopup = document.querySelector('.add-project-popup');\n        const closeProject = document.querySelector('.btn-close-poject-popup');\n\n        createNewProjectButton.classList.remove('active');\n        newProjectPopup.classList.remove('active');\n\n        closeProject.addEventListener('click', () => {\n            createNewProjectButton.classList.remove('active');\n            newProjectPopup.classList.remove('active')\n        })\n    }\n\n    function addProject() {\n        const newProjectInput = document.querySelector('.input-add-project-popup');\n        const inputError = document.querySelector('.title-error')\n        let projectName = newProjectInput.value.trim();\n        if (projectName === '') {\n            inputError.textContent = 'Project must have name'\n            return;\n        }\n        if (projectList.contains(projectName)) {\n            inputError.textContent = 'Project must have different names'\n            return;\n        }\n        projectList.addProject(projectName);\n        inputError.textContent = '';\n        clearUserProjects()\n        renderProjectList();\n        newProjectInput.value = '';\n        closeProjectInput();\n    }\n\n    function renderProjectList() {\n        projectList.forEach(project => {\n                if (\n                    project.title !== 'Your Tasks' &&\n                    project.title !== 'Today' && \n                    project.title !== 'This week' \n                ) {\n                    renderProjectsNav(project.title);\n                }\n            })\n    }\n\n    function deleteProject() {\n        const deleteProjectButton = document.querySelectorAll('.btn-project-delete');\n        deleteProjectButton.forEach((element) => element.addEventListener('click', (e) => {\n            let projectName = e.target.parentNode.parentNode.textContent;\n            for (let i = 0; i < projectList.length; i++)\n            {\n                if (projectName === projectList[i].title)\n                {\n                    projectList.deleteProject(i);\n                    console.log(projectList);\n                    clearUserProjects();\n                    renderProjectList();\n                    clearTaskContainer()      \n                }         \n            }\n        }))\n    }\n\n    function setActiveProject() {\n        const activeProject = document.querySelectorAll('.btn-choose-project')\n        activeProject.forEach((element) => element.addEventListener('click', handleProjects)\n    )}\n\n    function handleProjects(e) {\n        hideAddTaskForm();\n        const projectTitle = this.textContent.trim();\n        if (e.target.classList.contains('fa-times'))\n        {\n            deleteProject();\n            return; \n        }\n        openProject(projectTitle, this);\n    }\n\n    function openProject(projectTitle, projectButton) {\n        const projectButtons = document.querySelectorAll('.btn-choose-project');\n        projectButtons.forEach((button) => button.classList.remove('active'));\n        projectButton.classList.add('active');\n        renderActiveProject(projectTitle);\n    }\n\n    function renderActiveProject(projectTitle) {\n        const tasksContainer = document.querySelector('.task-projects-preview');\n        const projectName = document.createElement('h1');\n        const tasksList = document.createElement('div');\n        const addTaskButton = document.createElement('button')\n        const addTaskButtonIcon = document.createElement('i');\n        const addTaskText = document.createElement('span');\n\n        clearTaskContainer()\n\n        tasksList.classList.add('task-list');\n        addTaskButton.classList.add('btn-add-task');\n        addTaskButtonIcon.classList.add('fas', 'fa-plus');\n        addTaskText.textContent = 'Add Task';\n\n        addTaskButton.appendChild(addTaskButtonIcon);\n        addTaskButton.appendChild(addTaskText);\n\n        projectName.textContent = `${projectTitle}`;\n\n        if (projectTitle === 'Today' || projectTitle === 'This week')\n        {\n            tasksContainer.appendChild(projectName);\n            tasksContainer.appendChild(tasksList);\n        }\n        else \n        {\n            tasksContainer.appendChild(projectName);\n            tasksContainer.appendChild(tasksList);\n            tasksContainer.appendChild(addTaskButton);\n            openAddTaskForm()\n        }\n        return tasksContainer;\n    }\n\n    function clearUserProjects() {\n        const userProjectList = document.querySelector('.projects-user');\n        userProjectList.innerHTML = '';\n    }\n\n    function clearTaskContainer() {\n        const tasksContainer = document.querySelector('.task-projects-preview');\n        tasksContainer.innerHTML = '';\n    }\n\n    function renderProjectsNav(title) {\n        const userProjectList = document.querySelector('.projects-user');\n        const userProjectButton = document.createElement('button');\n        const userProjectIcon = document.createElement('i');\n        const userProjectDeleteButton = document.createElement('button');\n        const userProjectDeleteIcon = document.createElement('i');\n        const projectTitleSpan = document.createElement('span');\n\n        userProjectIcon.classList.add('fas', 'fa-list-check');\n        userProjectDeleteIcon.classList.add('fas', 'fa-times');\n        userProjectButton.classList.add('btn-project', 'btn-choose-project');\n        userProjectDeleteButton.classList.add('btn-project-delete');\n        projectTitleSpan.textContent = title;\n\n        userProjectDeleteButton.appendChild(userProjectDeleteIcon);\n        userProjectButton.appendChild(userProjectIcon);\n        userProjectButton.appendChild(projectTitleSpan);\n        userProjectButton.appendChild(userProjectDeleteButton);\n\n        userProjectList.appendChild(userProjectButton);\n\n        deleteProject();\n        setActiveProject();\n        return userProjectList;\n    }\n\n\n    function openAddTaskForm() {\n        const openForm = document.querySelector('.btn-add-task');\n        const form = document.querySelector('.add-task-form');\n        openForm.addEventListener('click', (e) => {\n            openForm.classList.add('active');\n            form.classList.add('active');\n        })\n    }\n\n    function hideAddTaskForm() {\n        const form = document.querySelector('.add-task-form');\n        form.classList.remove('active');\n    }\n\n})();\n\n\n\n\nclass Project {\n    constructor(title){\n        this.title = title;\n        this.tasksList = [];\n    }\n\n    addTask(title, description, dueDate, priority) {\n        this.tasksList.push(new Tasks(title, description, dueDate, priority));\n    }\n\n    getTitle() {\n        return this.title;\n    }\n\n}\n\nclass Tasks {\n    constructor(title, info, dueDate, priority) {\n        this.title = title;\n        this.info = info;\n        this.dueDate = dueDate;\n        this.priority = priority;\n        this.completed = false;\n    }\n    \n    toggleCompleted() {\n        this.completed === false ? this.completed = true : this.completed = false;\n    }\n    \n    editTask(key, value) {\n        this[key] = value;\n    }\n}\n\n\n\nlet projectList = [];\nprojectList.addProject = (title) => {\n    projectList.push(new Project(title));\n};\n\nprojectList.deleteProject = (position) => {\n    projectList.splice(position, 1);\n};\n\nprojectList.contains = (projectName) => {\n    return projectList.some((project) => project.title === projectName)\n}\nprojectList.addProject('Your Tasks');\nprojectList.addProject('Today');\nprojectList.addProject('This week');\nconsole.log(projectList);\n\nconst test = new Project('New Project');\n\nconsole.log(test.getTitle());\n\n\n\n//     addTask(title, info, dueDate, priority) { \n//         this.tasksList.push(new Tasks(title, info, dueDate, priority));\n//     }\n// }\n\n// class Tasks {\n//     constructor(title, info, dueDate, priority) {\n//         this.title = title;\n//         this.info = info;\n//         this.dueDate = dueDate;\n//         this.priority = priority;\n//         this.completed = false;\n//     }\n\n//     toggleCompleted() {\n//         this.completed === false ? this.completed = true : this.completed = false;\n//     }\n\n//     editTask(key, value) {\n//         this[key] = value;\n//     }\n// }\n\n\n// export default Tasks;\n\n//# sourceURL=webpack://to-do-list/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.js"]();
/******/ 	
/******/ })()
;